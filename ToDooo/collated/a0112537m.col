//@author: a0112537m



	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\DateParser.java
	 */

	/*
	 * Gets today's date portion only
	 */
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\DateParser.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\Execution.java
	 */

	public static String getCleanFrequencySetting() {
		return Main.storage.readSaveCleanRecurrence().toString();
	}
	
	public static void executeCleanCompletedTasks() {
		ArrayList<Task> taskList = Main.list.getTasks();
		Task task;
		TaskStatus taskStatus;
		String taskId;
		int restartIndex = -1;
		boolean isRecurring;
	
		for(int i = 0; i < taskList.size(); i++) {
			task = taskList.get(i);
			taskId = task.getId();
			taskStatus = task.getStatus();
			isRecurring = task.getIsRecurring();
			
			if(isRecurring == false) {
				if(taskStatus.equals(TaskStatus.COMPLETED)) {
					Main.list.deleteTaskById(taskId);
					i = restartIndex;
				}
			} else {
				cleanCompletedRecurringTask(task, taskId);
			}
		}
	}
	
	public static void executeCleanCategories() {
		Main.storage.removeEmptyCategory();
	}
	
	/*
	 * TimerTask to clear system message for
	 * change save path function in setting
	 */
	public static void executeSysMsgTimerForSavePath() {
		ExecutionTimer.SystemMsgTimerSavePath sysMsgTimerSavePath = 
				new ExecutionTimer.SystemMsgTimerSavePath();
		
		Timer timer = sysMsgTimerSavePath.getTimer();
		timer.schedule(sysMsgTimerSavePath, Constant.TIMER_SYSTEM_MSG_DURATION);
	}
	
	/*
	 * TimerTask to clear system message for
	 * change clean completed task duration in setting
	 */
	public static void executeSysMsgTimerForClean() {
		ExecutionTimer.SystemMsgTimerCleanSetting systemMsgTimerCleanSetting =
				new ExecutionTimer.SystemMsgTimerCleanSetting();
		
		Timer timer = systemMsgTimerCleanSetting.getTimer();
		timer.schedule(systemMsgTimerCleanSetting, Constant.TIMER_SYSTEM_MSG_DURATION);
	}
	
	public static void executeClearSavePathMsg() {
		settingController.lblSysMsgSettingA.setText(Constant.EMPTY_STRING);	
	}
	
	public static void executeClearCleanSettingMsg() {
		settingController.lblSysMsgSettingB.setText(Constant.EMPTY_STRING);	
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\Execution.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\Execution.java
	 */

	private static String executeView(String userInput) {
		String systemMsg = null;
		Task selectedTask = Main.list.selectTaskFromList(userInput);
		
		if(selectedTask != null) {
			systemMsg = Constant.MSG_VIEW_SUCCESS;
		} else {
			systemMsg = Constant.MSG_VIEW_FAIL;
		}
		
		return systemMsg;
	}
	
	private static void displayDetail(String systemMsg) {
		if(systemMsg.equalsIgnoreCase(Constant.MSG_VIEW_SUCCESS)) {
			try {
				mainController.viewDetails(Main.list.getSelectedTask());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	private static void displaySearchResult(String systemMsg) {
		if(systemMsg.contains(Constant.SYS_MSG_KEYWORD_SEARCH)) {
			mainController.executeSearchResult();
		}
	}
	
	private static void cleanCompletedRecurringTask(Task task, String taskId) {
		RecurringTask recurringTask = null;
		String recurringId = null;
		ArrayList<RecurringTask> recurringList = task.getRecurringTasks();
		
		for(int j = 0; j < recurringList.size(); j++) {
			recurringTask = recurringList.get(j);
			
			if(recurringTask.getStatus().equals(TaskStatus.COMPLETED)) {
				recurringId = taskId + Constant.PREFIX_RECURRING_ID + 
							  recurringTask.getRecurringTaskId();
				
				Main.list.deleteTaskById(recurringId);
			}
		}
	}
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\Execution.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\ExecutionTimer.java
	 */

	public static class SystemMsgTimerSavePath extends TimerTask {
		private Timer _timer;
		
		public SystemMsgTimerSavePath() {
			_timer = new Timer();
		}
		
		public Timer getTimer() {
			return _timer;
		}
		
        public void run() {
    		Platform.runLater(new Runnable() {
    		    @Override
    		    public void run() {
    		    	Execution.executeClearSavePathMsg();
    		    }
    		});
    		
            _timer.cancel();
        }
    }
	
	public static class SystemMsgTimerCleanSetting extends TimerTask {
		private Timer _timer;
		
		public SystemMsgTimerCleanSetting() {
			_timer = new Timer();
		}
		
		public Timer getTimer() {
			return _timer;
		}
		
        public void run() {
    		Platform.runLater(new Runnable() {
    		    @Override
    		    public void run() {
    		    	Execution.executeClearCleanSettingMsg();	
    		    }
    		});
    		
    		_timer.cancel();
        }
	}
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\ExecutionTimer.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\Storage.java
	 */

	/*
	 * Update setting.xml with the period of 
	 * removing completed task from listFile.xml
	 */
	public String updateCleanRecurrenceInSetting(String recurrence) { 
		Document doc = getSettingDocument();

		Node clean = doc.getElementsByTagName(Constant.TAG_SETTING_CLEAN).item(0);
		clean.setTextContent(recurrence);
		
		return writeFile(doc, Constant.PATH_SETTING);
	}
		
	/*
	 * Read the setting of the clean recurrence function
	 */
	public String readSaveCleanRecurrence() {
		String cleanRecurrence = null;
		Document settingDoc = getSettingDocument();		
		
		try {
			XPathExpression expression = 
					_xPath.compile(Constant.XML_XPATH_SETTING_CLEAN);
			
			cleanRecurrence = (String) expression.
					   		  evaluate(settingDoc, XPathConstants.STRING);
			
		} catch (XPathExpressionException exception) {
			Main.LOGGER.logp(Level.SEVERE, 
							 Storage.class.getName(), 
							 "readSaveCleanRecurrence", 
							 exception.getMessage());
		}
		
		return cleanRecurrence;
	}
	
	public void removeEmptyCategory() {
		Document document = getFileDocument();
		
		Element root = document.getDocumentElement();
		NodeList categoryNodes = root.getElementsByTagName(Constant.TAG_CATEGORY);
		
		Node categoryNode = null;
		String categoryString = null;
		boolean isEmpty;
		int restartIndex = -1;
		
		boolean isNotEqual = false;
		for (int i = 0; i < categoryNodes.getLength(); i++) {
			categoryNode = categoryNodes.item(i);
			categoryString = categoryNode.getTextContent();
			isEmpty = isEmptyCategory(categoryString);
			
			isNotEqual = !categoryString.
						 equalsIgnoreCase(Constant.CATEGORY_UNCATEGORISED);
			
			if(isNotEqual && isEmpty) {
				categoryNode.getParentNode().removeChild(categoryNode);
				Main.list.getCategories().remove(categoryString);
				i = restartIndex;
			}	
		}
		
		cleanAndWriteFile(document);
	}
		
	// -----------------------------------------------------------------------------------------------
	// Private methods
	// -----------------------------------------------------------------------------------------------
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\Storage.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\Task.java
	 */

	// Creating a repeated task with a different date for recurring task
	public static Task createRecurringChildItem(Task originalTask, String recurringId, 
												TaskStatus recurringStatus, Date onDate, 
												Date byDate, Date startDate) {
		Task task = new Task();
		
		task.setBy(byDate);
		task.setCategory(originalTask.getCategory());
		task.setEndDate(originalTask.getEndDate());
		task.setFrom(originalTask.getFrom());
		task.setId(recurringId);
		task.setIsRecurring(originalTask.getIsRecurring());
		task.setIsValid(originalTask.getIsValid());
		task.setOn(onDate);
		task.setOriginalText(originalTask.getOriginalText());
		task.setPriority(originalTask.getPriority());
		task.setRecurringTasks(originalTask.getRecurringTasks());
		task.setRepeat(originalTask.getRepeat());
		task.setRepeatDay(originalTask.getRepeatDay());
		task.setRepeatUntil(originalTask.getRepeatUntil());
		task.setStartDate(startDate);
		task.setStatus(recurringStatus);
		task.setTaskType(originalTask.getTaskType());
		task.setTo(originalTask.getTo());
		task.setToDo(originalTask.getToDo());
		
		return task;
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\Task.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\TaskSorter.java
	 */

	public static ArrayList<Task> getTasksSortedByDate(ArrayList<Task> list) {
		return reallocateFloatingTasks(sortByDate(list));
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\TaskSorter.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\TaskSorter.java
	 */

		private static ArrayList<Task> reallocateFloatingTasks(ArrayList<Task> list) {
			ArrayList<Task> floatingList = extractFloatingTasks(list);
			addFloatingTasksBackIntoList(list, floatingList);
			
			return list;
		}
		
		private static ArrayList<Task> extractFloatingTasks(ArrayList<Task> list) {
			Task task = null;
			String taskType = null;
			ArrayList<Task> floatingList = new ArrayList<Task>();
			
			for(int i = 0; i < list.size(); i++) {
				task = list.get(i);
				taskType = task.getTaskType().toString();
				if(taskType.equalsIgnoreCase(TaskType.FLOATING.toString())) {
					floatingList.add(list.get(i));
				} else {
					break;
				}
			}
			
			list.removeAll(floatingList);
			
			return floatingList;
		}

		private static void addFloatingTasksBackIntoList(ArrayList<Task> list, ArrayList<Task> floatingList) {		
			if(list.isEmpty()) {
				// insert the floating task to the top of the list 
				addFloatingTaskToTaskList(list, floatingList);
			} else {
				// insert floating tasks after today's task in order
				insertFloatingTasksInOrder(list, floatingList); 
			}
		}

		private static void insertFloatingTasksInOrder(ArrayList<Task> list,
											   		   ArrayList<Task> floatingList) {
			Task task = null;
			TaskType taskType = null;
			Date date = null;
			Date today = null;
			
			for(int j = 0; j < list.size(); j++) {
				task = list.get(j);
				taskType = task.getTaskType();
				date = task.getStartDate();
				today = DateParser.getTodayDate().getTime();
				int counter = j;
				
				if(!taskType.equals(TaskType.FLOATING) && 
				   DateParser.isAfterDateWithoutTime(date, today)) {
					insertFloatingTaskToTaskList(list, floatingList, counter);
					
					break;
				} else if(taskType.equals(TaskType.FLOATING) || 
						  j == list.size()-1) {
					addFloatingTaskToTaskList(list, floatingList);
					
					break;
				}
			}
		}

		private static void insertFloatingTaskToTaskList(ArrayList<Task> list,
														 ArrayList<Task> floatingList, int counter) {
			for(int k = 0; k < floatingList.size(); k++) {
				list.add(counter, floatingList.get(k));
				counter++;
			}
		}

		private static void addFloatingTaskToTaskList(ArrayList<Task> list,
														 ArrayList<Task> floatingList) {
			for(int k = 0; k < floatingList.size(); k++) {
				list.add(floatingList.get(k));
			}
		}
		
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\TaskSorter.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\ToDoList.java
	 */

	public Task selectTaskFromList(String userInput) {
		Task selectedTask = null;
		String targetId = InputParser.getTargetIdFromString(userInput);
		
		selectedTask = selectTaskById(targetId);
		_selectedTask = selectedTask;
		
		return selectedTask;
	}
	
	// ---------------------------------------------------------
	// Methods used for rendering view
	// ---------------------------------------------------------				
	/*
	 * Generates a list that consist of Task objects and child task items 
	 * represented as Task objects.
	 */
	public static ArrayList<Task> generateTaskItems(ArrayList<Task> tasks, String displayType) {
		ArrayList<Task> tempTasks = new ArrayList<>();
		Task task = null;
		boolean isRecurring = false;
		String taskType = null;
		
		for(int i = 0; i < tasks.size(); i++) {
			task = tasks.get(i);
			taskType = task.getTaskType().toString();
			isRecurring = task.getIsRecurring();
			
			if(!taskType.equalsIgnoreCase(TaskType.TIMED.toString())) {
				if(isRecurring) {
					generateRecurChildTasks(tempTasks, task, taskType);
				} else {
					tempTasks.add(task);
				}
			} else {
				if(displayType.equalsIgnoreCase(Constant.TAB_NAME_CATEGORY) || 
					displayType.equalsIgnoreCase(Constant.TAB_NAME_PRIORITY)) {
					tempTasks.add(task);
				} else {
					generateRepeatedTimedTask(tempTasks, task);
				}
			}
		}
		
		return tempTasks;
	}
	
	// ---------------------------------------------------------
	// Complete/Uncomplete -related methods
	// ---------------------------------------------------------
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\ToDoList.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\ToDoList.java
	 */

	private static Task getRecurChildItemForEventOrDated(Task task,
														 Date recurringDate, 
														 String taskType, 
														 String recurringId,
														 TaskStatus recurringStatus, Task taskA) {
		
		if(taskType.equalsIgnoreCase(TaskType.EVENT.toString())) {
			taskA = Task.createRecurringChildItem(task, recurringId, recurringStatus, 
					recurringDate, task.getBy(), recurringDate);
			
		} else if(taskType.equalsIgnoreCase(TaskType.DATED.toString())) {
			taskA = Task.createRecurringChildItem(task, recurringId, recurringStatus, 
					task.getOn(), recurringDate, recurringDate);
		}
		
		return taskA;
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\ToDoList.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\test\DateParserTest.java
	 */

package test;

import static org.junit.Assert.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.junit.Test;

import application.DateParser;

public class DateParserTest {
	private String dateStrA, dateStrB;
	private SimpleDateFormat format;
	private Date dateA, dateB;
	
	@Test
	public void test() throws ParseException {
		initialiseDateValue();
		testCalculateDayOfWeek();
		testCalculateDayOfMonth();
		testCompareDate();
		testIsBeforeDate();
		testIsAfterDate();
	}
	
	public void initialiseDateValue() throws ParseException {
		format = new SimpleDateFormat("MMMM d, yyyy");
		dateStrA = "March 27, 2015";
		dateStrB = "April 04, 2015";
		dateA = format.parse(dateStrA);
		dateB = format.parse(dateStrB);
	}
	
	/*
	 * Equivalence Partition: [1-7]
	 * Possible boundary values: 0, 1, 2, 6, 7, 8
	 * This is a boundary case for an equivalent partition. 
	 */
	public void testCalculateDayOfWeek() {
		int result;
		int expected = 6;
		result = DateParser.calculateDayOfWeek(dateA);
		assertEquals(result, expected);
	}
	
	/*
	 * Equivalence Partition: [1-31]
	 * Possible boundary values: 0, 1, 2, 30, 31, 32
	 * This is not a boundary case for an equivalent partition. 
	 */
	public void testCalculateDayOfMonth() {
		int result;
		int expected = 27;
		result = DateParser.calculateDayOfMonth(dateA);
		assertEquals(result, expected);
	}
	
	/*
	 * Equivalence Partition: [The dates are the same], [The dates are different]
	 */
	public void testCompareDate() {
		boolean result;
		boolean expected = false;
		result = DateParser.compareDate(dateA, dateB);
		assertEquals(result, expected);
	}
	
	/*
	 * Equivalence Partition: [dateA is before dateB], [dateA is not before dateB]
	 */
	public void testIsBeforeDate() {
		boolean result;
		boolean expected = true;
		result = DateParser.isBeforeDate(dateA, dateB);
		assertEquals(result, expected);
	}
	
	/*
	 * Equivalence Partition: [dateB is after dateA], [dateB is not after dateA]
	 */
	public void testIsAfterDate() {
		boolean result;
		boolean expected = true;
		result = DateParser.isAfterDate(dateB, dateA);
		assertEquals(result, expected);
	}
	
	
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\test\DateParserTest.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\BodyController.java
	 */

package controller;

import javafx.fxml.FXML;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;

public class BodyController{

	private MainController mainCon;
	
	@FXML AnchorPane anPaneMain;
	@FXML VBox vBoxAll;
	@FXML VBox vBoxCategory;
	@FXML VBox vBoxPriority;
	@FXML Tab tabAll;
	@FXML Tab tabCategory;
	@FXML Tab tabPriority;
	@FXML TabPane tPaneMain;
	@FXML ScrollPane sPaneAll;
	@FXML ScrollPane sPaneCategory;
	@FXML ScrollPane sPanePriority;
	
	public void initMainController(MainController mainController) {
		mainCon = mainController;
	}
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\BodyController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\DetailController.java
	 */

package controller;

import application.Constant;
import application.Main;
import application.Task;
import application.TaskType;
import controller.MainController;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.TextArea;

public class DetailController {
	
	private MainController mainCon;
	@FXML Label detailLblId;
	@FXML Label detailLblType;
	@FXML Label detailLblDateTime;
	@FXML Label detailLblCategory;
	@FXML Label detailLblPriority;
	@FXML Label detailLblStatus;
	@FXML Label detailLblRecurring;
	@FXML TextArea detailTxtAreaDesc;
	
	public void initMainController(MainController mainController) {
		mainCon = mainController;
	}
	
	@FXML
	public void initialize() {
		Task task = Main.list.getSelectedTask();
		String taskType = task.getTaskType().toString();
		
		detailLblId.setText(task.getId());
		detailTxtAreaDesc.setText(task.getToDo());
		detailTxtAreaDesc.setEditable(false);
		detailTxtAreaDesc.getStyleClass().add(Constant.CSS_CLASS_TEXTAREA_DETAIL);
		detailLblType.setText(task.getTaskType().toString());
		detailLblCategory.setText(task.getCategory().toUpperCase());
		detailLblPriority.setText(task.getPriority().toString());
		detailLblStatus.setText(task.getStatus().toString());
		detailLblDateTime.setText(formatDateByTaskType(task, taskType));
		detailLblRecurring.setText(String.valueOf(task.getIsRecurring()));
	}
	
	private String formatDateByTaskType(Task task, String taskType) {
		String result = Constant.EMPTY_DATE;
		
		if(!taskType.equalsIgnoreCase(TaskType.FLOATING.toString())) {
			if(taskType.equalsIgnoreCase(TaskType.DATED.toString())) {
				result = Constant.STR_BEFORE_DATE_BY + " " + 
						 Constant.FORMAT_DATE_TIME_OUTPUT.format(task.getBy());
				
			} else if(taskType.equalsIgnoreCase(TaskType.TIMED.toString())) {
				result = Constant.STR_BEFORE_DATE_FROM + " " + 
						 Constant.FORMAT_DATE_TIME_OUTPUT.format(task.getFrom()) +
						 Constant.STR_BEFORE_DATE_TO + " " + 
						 Constant.FORMAT_DATE_TIME_OUTPUT.format(task.getTo());
				
			} else {
				result = Constant.FORMAT_DATE_TIME_OUTPUT.format(task.getOn());
			}
		}
		
		return result;
	}
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\DetailController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\HeaderController.java
	 */

	@FXML
	public void loadSettingMouse(MouseEvent mouseEvent) throws IOException {
		mainCon.executeSetting();
	}
	
	@FXML
	public void goBackToMainMouse(MouseEvent mouseEvent) throws IOException {
		mainCon.executeGoBack();
	}
	
	@FXML
	public void loadSearchResult(KeyEvent mouseEvent) throws IOException {
		mainCon.executeSearchResult();
	}
	
	// -----------------------------------------------------------------------------------------------
	// Private methods
	// -----------------------------------------------------------------------------------------------
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\HeaderController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\MainController.java
	 */

	public void setSystemMessage(String systemMsg) {
		int sysMsgType = checkSystemMsg(systemMsg);
		
		if(sysMsgType == Constant.SYS_MSG_TYPE_SUCCESS) {
			headerController.imgSysMsg.setImage(new Image(Constant.ICON_SUCCESS));
			headerController.lblSysMsg.setTextFill(Constant.COLOR_SUCCESS);
		} else if(sysMsgType == Constant.SYS_MSG_TYPE_ERROR) {
			headerController.imgSysMsg.setImage(new Image(Constant.ICON_ERROR));
			headerController.lblSysMsg.setTextFill(Constant.COLOR_ERROR);
		} else if (sysMsgType == Constant.SYS_MSG_TYPE_FEEDBACK){
			headerController.imgSysMsg.setImage(new Image(Constant.ICON_FEEDBACK));
			headerController.lblSysMsg.setTextFill(Constant.COLOR_FEEDBACK);;
		}
		
		headerController.lblSysMsg.setText(systemMsg);	
		headerController.lblSysMsg.getStyleClass().
		add(Constant.CSS_CLASS_LABEL_SYSTEM_MSG);
		Execution.executeSystemMsgTimerTask();
	}

	public void loadListByDate(String displayType) {
		int indexForNextLoop = 0;
		VBox vBox = getContainer(displayType);
		vBox.getChildren().clear();
		ArrayList<Task> taskList = getListForDisplay(displayType);
		ArrayList<Task> temp = getListForDisplay(displayType, taskList);
		
		today.clear();
		overdue.clear();
		floating.clear();
		todayDate = DateParser.getTodayDate().getTime();
		
	    indexForNextLoop = organiseTasks(indexForNextLoop, temp); 
		
	    renderOverdueTask(displayType, vBox);
	    renderTodayTask(displayType, vBox);
	    renderFloatingTask(displayType);
		
		renderTasksWithDate(displayType, indexForNextLoop, temp);
	}
	
	public void loadListByCategory(String displayType) {
		bodyController.vBoxCategory.getChildren().clear();
		
		Task task;
		String category;
		ArrayList<Task> taskList = Main.list.getTasks();
		ArrayList<Task> temp = getListForDisplay(displayType, taskList);
		
		for(int i = 0; i < temp.size(); i++) {
			task = temp.get(i);
			category = task.getCategory();
			
			if(i == 0 || !category.equalsIgnoreCase(temp.get(i - 1).getCategory())) {
				renderTaskItem(category.toUpperCase(), task, displayType);
			} else {
				renderTaskItem(Constant.EMPTY_STRING, task, displayType);
			}
		}
	}
	
	public void loadListByPriority(String displayType) {
		bodyController.vBoxPriority.getChildren().clear();
		
		Task task;
		String priority;
		ArrayList<Task> taskList = Main.list.getTasks();
		ArrayList<Task> temp = getListForDisplay(displayType, taskList);
		
		for(int i = 0; i < temp.size(); i++) {
			task = temp.get(i);
			priority = task.getPriority().toString();
			
			renderTaskItem(Constant.EMPTY_STRING, task, displayType);
			
			if(i != temp.size()-1 && 
			   !priority.equalsIgnoreCase(temp.get(i + 1).getPriority().toString())) {
				addHorizontalBar(getContainer(displayType));
			} 
		}
	}
	
	public void executeSetting() {
		headerController.settingIcon.setVisible(false);
		headerController.backIcon.setVisible(true);
		
		bodyController.anPaneMain.setVisible(false);
		
		settingController.anPaneSetting.setVisible(true);
		searchResultController.anPaneSearchResult.setVisible(false);
	}
	
	public void executeGoBack() {
		headerController.settingIcon.setVisible(true);
		headerController.backIcon.setVisible(false);
		
		bodyController.anPaneMain.setVisible(true);
		
		settingController.anPaneSetting.setVisible(false);
		searchResultController.anPaneSearchResult.setVisible(false);
	}
	
	public void executeSearchResult() {
		headerController.settingIcon.setVisible(false);
		headerController.backIcon.setVisible(true);
		
		bodyController.anPaneMain.setVisible(false);		
		settingController.anPaneSetting.setVisible(false);
		
		searchResultController.anPaneSearchResult.setVisible(true);
		searchResultController.loadSearchList();
	}
	
	public void viewDetails(Task task) throws IOException {
		FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(Constant.PATH_DETAIL));
        Parent root1 = (Parent) fxmlLoader.load();
		
		detailPopup = new Stage();
		Scene scene = new Scene(root1);
		
		scene.setOnKeyPressed(new EventHandler<KeyEvent>() {
	        public void handle(KeyEvent ke) {
	            if (Constant.SHORTCUT_DETAIL.match(ke)) {
	                detailPopup.close();
	            }
	        }
	    });
		
		detailPopup.initStyle(StageStyle.UNDECORATED);
		detailPopup.setScene(scene); 
        detailPopup.show();
	}
	
	public void cleanCompletedTasks() {
		int dayOfWeek;
		int dayOfMonth;
		String cleanRecurrence = Main.storage.readSaveCleanRecurrence();
		Calendar today = DateParser.getTodayDate();
		
		if(cleanRecurrence.equalsIgnoreCase(Frequency.WEEKLY.toString())) {
			dayOfWeek = DateParser.calculateDayOfWeek(today);
			
			if(dayOfWeek == 1) {
				Execution.executeCleanCompletedTasks();
			}
		} else if(cleanRecurrence.equalsIgnoreCase(Frequency.MONTHLY.toString())) {
			dayOfMonth = DateParser.calculateDayOfMonth(today);
			
			if(dayOfMonth == 1) {
				Execution.executeCleanCompletedTasks();
			}
		}
	}
		
	public void loadListsInTabs() {		
		loadListByDate(Constant.TAB_NAME_ALL);
		loadListByCategory(Constant.TAB_NAME_CATEGORY);
		loadListByPriority(Constant.TAB_NAME_PRIORITY);
	}
	
	// -----------------------------------------------------------------------------------------------
	// Private methods
	// -----------------------------------------------------------------------------------------------
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\MainController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\SearchResultController.java
	 */

package controller;

import application.Constant;
import javafx.fxml.FXML;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;

public class SearchResultController {
	
	private MainController mainCon;
	@FXML AnchorPane anPaneSearchResult;
	@FXML VBox vBoxSearchResult;
	
	
	public void initMainController(MainController mainController) {
		mainCon = mainController;
	}
	
	public void loadSearchList() {
		vBoxSearchResult.getChildren().clear();
		mainCon.loadListByDate(Constant.VIEW_NAME_SEARCH_RESULT);
	}
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\SearchResultController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\SettingController.java
	 */

	@FXML 
	public void openFileDialogKey(KeyEvent keyEvent) {
		if(Constant.SHORTCUT_OPEN_FILE_DIALOG.match(keyEvent)) {
			openFileDialog();
		}
	}
	
	@FXML 
	public void openFileDialogMouse(MouseEvent mouseEvent) {
		openFileDialog();
	}
	
	@FXML 
	public void setCleanRecurrenceWeekly(MouseEvent mouseEvent) {
		String sysMsg = Main.storage.
						updateCleanRecurrenceInSetting(Frequency.WEEKLY.toString());
		
		displaySysMsgForClean(sysMsg);
	}
	
	@FXML 
	public void setCleanRecurrenceMonthly(MouseEvent mouseEvent) {
		String sysMsg = Main.storage.
						updateCleanRecurrenceInSetting(Frequency.MONTHLY.toString());
		
		displaySysMsgForClean(sysMsg);
	}
	
	@FXML
	public void initialize() {		
		initCleanSetting();		
		initSavePathSetting();
	}
	
	public void initMainController(MainController mainController) {
		mainCon = mainController;
	}
	
	public void openFileDialog() {
		String systemMsg = "";
		
		DirectoryChooser dirChooser = new DirectoryChooser();
		dirChooser.setTitle(Constant.TITLE_SETTING_DIR);
		
		File selectedDir = dirChooser.showDialog(anPaneSetting.getScene().getWindow());				
		if (selectedDir == null) {
			return;
		}
		
		txtPath.setText(selectedDir.getAbsolutePath());
		String newPath = txtPath.getText();

		systemMsg = Execution.executeChangeSavePath(newPath);
		displaySysMsgForSavePath(systemMsg);
	}
	
	// -----------------------------------------------------------------------------------------------
	// Private methods
	// -----------------------------------------------------------------------------------------------
	private void initSavePathSetting() {
		String savePath = Main.storage.
				readSavePath().replace("/","\\");
		
		txtPath.setText(savePath);
	}

	private void initCleanSetting() {
		String cleanRecurrence = Execution.getCleanFrequencySetting();
		
		if(cleanRecurrence.equalsIgnoreCase(Frequency.WEEKLY.toString())) {
			radioWeekly.setSelected(true);
		} else if(cleanRecurrence.equalsIgnoreCase(Frequency.MONTHLY.toString())) {
			radioMonthly.setSelected(true);
		}
	}
	
	private void displaySysMsgForSavePath(String systemMsg) {
		lblSysMsgSettingA.setText(systemMsg);
		
		if(systemMsg.contains(Constant.SYS_MSG_KEYWORD_FILE_SAVED)) {
			lblSysMsgSettingA.setTextFill(Constant.COLOR_SUCCESS);
		} else {
			lblSysMsgSettingA.setTextFill(Constant.COLOR_ERROR);
		}
		
		Execution.executeSysMsgTimerForSavePath();
	}
	
	private void displaySysMsgForClean(String systemMsg) {
		lblSysMsgSettingB.setText(systemMsg);
		
		if(systemMsg.contains(Constant.SYS_MSG_KEYWORD_FILE_SAVED)) {
			lblSysMsgSettingB.setTextFill(Constant.COLOR_SUCCESS);
		} else {
			lblSysMsgSettingB.setTextFill(Constant.COLOR_ERROR);
		}
		
		Execution.executeSysMsgTimerForClean();
	}
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\SettingController.java





