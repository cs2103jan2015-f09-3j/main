//@author: a0112537m



	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\DateParser.java
	 */

	public static boolean compareDate(Date dateA, Date dateB) {
		Calendar calendarA = Calendar.getInstance();
		Calendar calendarB = Calendar.getInstance();
		calendarA.setTime(dateA);
		calendarB.setTime(dateB);
		boolean sameDay = calendarA.get(Calendar.YEAR) == calendarB.get(Calendar.YEAR) &&
				calendarA.get(Calendar.DAY_OF_YEAR) == calendarB.get(Calendar.DAY_OF_YEAR);
		
		return sameDay;
	}
	
	public static boolean isAfterDateWithoutTime(Date dateA, Date dateB) {
		Calendar calendarA = Calendar.getInstance();
		Calendar calendarB = Calendar.getInstance();
		calendarA.setTime(dateA);
		calendarB.setTime(dateB);
		boolean isAfterDay = calendarA.get(Calendar.YEAR) >= calendarB.get(Calendar.YEAR) &&
				calendarA.get(Calendar.DAY_OF_YEAR) > calendarB.get(Calendar.DAY_OF_YEAR);
		
		return isAfterDay;
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\DateParser.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\DateParser.java
	 */

	public static Calendar getTodayDate() {
		Calendar calendar = Calendar.getInstance();
		calendar.setTimeZone(TimeZone.getDefault());
		
		calendar.set(Calendar.HOUR_OF_DAY, 0); 
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
	    
	    return calendar;
	}
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\DateParser.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\Execution.java
	 */

	private static String executeView(String userInput) {
		String systemMsg = null;
		Task selectedTask = Main.list.selectTaskFromList(userInput);
		
		if(selectedTask != null) {
			systemMsg = Constant.MSG_VIEW_SUCCESS;
		} else {
			systemMsg = Constant.MSG_VIEW_FAIL;
		}
		
		return systemMsg;
	}
	
	private static void displayDetail(String systemMsg) {
		if(systemMsg.equalsIgnoreCase(Constant.MSG_VIEW_SUCCESS)) {
			try {
				mainController.viewDetails(Main.list.getSelectedTask());
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	private static void displaySearchResult(String systemMsg) {
		if(systemMsg.contains(Constant.SYS_MSG_KEYWORD_SEARCH)) {
			mainController.executeSearchResult();
		}
	}
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\Execution.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\Task.java
	 */

	// Creating a repeated task with a different date for recurring task
	public static Task createRecurringChildItem(Task originalTask, String recurringId, 
												Status recurringStatus, Date onDate, 
												Date byDate, Date startDate) {
		Task task = new Task();
		
		task.setBy(byDate);
		task.setCategory(originalTask.getCategory());
		task.setEndDate(originalTask.getEndDate());
		task.setFrom(originalTask.getFrom());
		task.setId(recurringId);
		task.setIsRecurring(originalTask.getIsRecurring());
		task.setIsValid(originalTask.getIsValid());
		task.setOn(onDate);
		task.setOriginalText(originalTask.getOriginalText());
		task.setPriority(originalTask.getPriority());
		task.setRecurringTasks(originalTask.getRecurringTasks());
		task.setRepeat(originalTask.getRepeat());
		task.setRepeatDay(originalTask.getRepeatDay());
		task.setRepeatUntil(originalTask.getRepeatUntil());
		task.setStartDate(startDate);
		task.setStatus(recurringStatus);
		task.setTaskType(originalTask.getTaskType());
		task.setTo(originalTask.getTo());
		task.setToDo(originalTask.getToDo());
		
		return task;
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\Task.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\TaskSorter.java
	 */

	private static ArrayList<Task> reallocateFloatingTasks(ArrayList<Task> list) {
		ArrayList<Task> floatingList = extractFloatingTasks(list);
		addFloatingTasksBackIntoList(list, floatingList);
		
		return list;
	}
	
	private static ArrayList<Task> extractFloatingTasks(ArrayList<Task> list) {
		Task task;
		String taskType;
		ArrayList<Task> floatingList = new ArrayList<Task>();
		
		for(int i = 0; i < list.size(); i++) {
			task = list.get(i);
			taskType = task.getTaskType().toString();
			if(taskType.equalsIgnoreCase(TaskType.FLOATING.toString())) {
				floatingList.add(list.get(i));
			} else {
				break;
			}
		}
		
		list.removeAll(floatingList);
		
		return floatingList;
	}

	private static void addFloatingTasksBackIntoList(ArrayList<Task> list, ArrayList<Task> floatingList) {
		Task task;
		String taskType;
		Date date, today;
		
		if(list.isEmpty()) {
			for(int k = 0; k < floatingList.size(); k++) {
				list.add(floatingList.get(k));
			}
		} else {
			for(int j = 0; j < list.size(); j++) {
				task = list.get(j);
				taskType = task.getTaskType().toString();
				date = task.getStartDate();
				today = DateParser.getTodayDate().getTime();
				int counter = j;
				
				if(!taskType.equalsIgnoreCase(TaskType.FLOATING.toString()) && 
						DateParser.isAfterDateWithoutTime(date, today)) {
					for(int k = 0; k < floatingList.size(); k++) {
						list.add(counter, floatingList.get(k));
						counter++;
					}
					
					break;
				} else if(taskType.equalsIgnoreCase(TaskType.FLOATING.toString()) || 
						j == list.size()-1) {
					for(int k = 0; k < floatingList.size(); k++) {
						list.add(floatingList.get(k));
					}
					
					break;
				}
			} 
		}
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\TaskSorter.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\TaskSorter.java
	 */

	public static ArrayList<Task> getTasksSortedByDate(ArrayList<Task> list) {
		return reallocateFloatingTasks(sortByDate(list));
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\TaskSorter.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\application\ToDoList.java
	 */

	public static ArrayList<Task> generateTaskItems(ArrayList<Task> tasks, String displayType) {
		ArrayList<Task> tempTasks = new ArrayList<>();
		Task task;
		Date recurringDate;
		boolean isRecurring;
		String taskType;
		String recurringId;
		Status recurringStatus;
		
		for(int i = 0; i < tasks.size(); i++) {
			task = tasks.get(i);
			taskType = task.getTaskType().toString();
			isRecurring = task.getIsRecurring();
			
			if(!taskType.equalsIgnoreCase(TaskType.TIMED.toString())) {
				if(isRecurring) {
					for(int j = 0; j < task.getRecurringTasks().size(); j++) {
						Task taskA = null;
						recurringDate = task.getRecurringTasks().get(j).getRecurDate();
						recurringId = task.getId() + Constant.PREFIX_RECURRING_ID + 
								task.getRecurringTasks().get(j).getRecurringTaskId();
						recurringStatus = task.getRecurringTasks().get(j).getStatus();
						taskA = getRecurChildItemForEventOrDated(task, recurringDate, taskType, recurringId,
								recurringStatus, taskA);
						tempTasks.add(taskA);
					}
				} else {
					Task t2 = new Task();
					t2 = task;
					tempTasks.add(t2);
				}
			} else {
				if(displayType.equalsIgnoreCase(Constant.TAB_NAME_CATEGORY) || 
						displayType.equalsIgnoreCase(Constant.TAB_NAME_PRIORITY)) {
					Task t2 = new Task();
					t2 = task;
					tempTasks.add(t2);
				} else {
					Calendar start = Calendar.getInstance();
					start.setTime(task.getFrom());
					Calendar end = Calendar.getInstance();
					end.setTime(task.getTo());
					
					for (Date date = start.getTime(); !start.after(end); start.add(Calendar.DATE, 1), date = start.getTime()) {
						Task t3 = Task.createRecurringChildItem(task, task.getId(), task.getStatus(), 
								task.getOn(), task.getBy(), date);
						tempTasks.add(t3);
					}
				}
			}
		}
		
		return tempTasks;
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\application\ToDoList.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\DetailController.java
	 */

package controller;

import application.Constant;
import application.Main;
import application.Task;
import application.TaskType;
import controller.MainController;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.TextArea;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.Region;
import javafx.scene.text.TextFlow;

public class DetailController {
	
	private MainController mainCon;
	@FXML Label detailLblId;
	@FXML Label detailLblType;
	@FXML Label detailLblDateTime;
	@FXML Label detailLblCategory;
	@FXML Label detailLblPriority;
	@FXML Label detailLblStatus;
	@FXML Label detailLblRecurring;
	@FXML TextArea detailTxtAreaDesc;
	//@FXML TextArea detailTxtAreaAddition;
	
	public void init(MainController mainController) {
		mainCon = mainController;
	}
	
	@FXML
	public void initialize() {
		Task task = Main.list.getSelectedTask();
		String taskType = task.getTaskType().toString();
		
		detailLblId.setText(task.getId());
		detailTxtAreaDesc.setText(task.getToDo());
		detailTxtAreaDesc.setEditable(false);
		detailTxtAreaDesc.getStyleClass().add(Constant.CSS_CLASS_TEXTAREA_DETAIL);
		detailLblType.setText(task.getTaskType().toString());
		detailLblCategory.setText(task.getCategory().toUpperCase());
		detailLblPriority.setText(task.getPriority().toString());
		detailLblStatus.setText(task.getStatus().toString());
		detailLblDateTime.setText(getDateFormat(task, taskType));
		detailLblRecurring.setText(getIsRecurring(task));
		//detailTxtAreaAddition.setText(task.getAddtionalNote());
		//saveAdditionalNote(detailTxtAreaAddition.getText());
	}
	
	private String getDateFormat(Task task, String taskType) {
		String result = Constant.EMPTY_DATE;
		
		if(!taskType.equalsIgnoreCase(TaskType.FLOATING.toString())) {
			if(taskType.equalsIgnoreCase(TaskType.DATED.toString())) {
				result = Constant.STR_BEFORE_DATE_BY + " " + Constant.FORMAT_DATE_TIME_OUTPUT.format(task.getBy());
			} else if(taskType.equalsIgnoreCase(TaskType.TIMED.toString())) {
				result = Constant.STR_BEFORE_DATE_FROM + " " + Constant.FORMAT_DATE_TIME_OUTPUT.format(task.getFrom()) +
							Constant.STR_BEFORE_DATE_TO + " " + Constant.FORMAT_DATE_TIME_OUTPUT.format(task.getTo());
			} else {
				result = Constant.FORMAT_DATE_TIME_OUTPUT.format(task.getOn());
			}
		}
		
		return result;
	}
	
	private String getIsRecurring(Task task) {
		if(task.getIsRecurring() == true) {
			return Constant.BOOLEAN_STRING_TRUE;
		} else {
			return Constant.BOOLEAN_STRING_FALSE;
		}
	}
	
	/*private void saveAdditionalNote(String note) {
		Main.list.getSelectedTask().setAddtionalNote(note);
	}*/	
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\DetailController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\HeaderController.java
	 */

	@FXML
	public void loadSettingMouse(MouseEvent e) throws IOException {
		mainCon.executeSetting();
	}
	
	@FXML
	public void goBackToMainMouse(MouseEvent e) throws IOException {
		mainCon.executeGoBack();
	}
	
	@FXML
	public void loadSearchResult(KeyEvent e) throws IOException {
		mainCon.executeSearchResult();
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\HeaderController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\MainController.java
	 */

	public void setSystemMessage(String systemMsg) {
		int sysMsgType = checkSystemMsg(systemMsg);
		
		if(sysMsgType == Constant.SYS_MSG_TYPE_SUCCESS) {
			headerController.imgSysMsg.setImage(new Image(Constant.ICON_SUCCESS));
			headerController.lblSysMsg.setTextFill(Constant.COLOR_SUCCESS);
		} else if(sysMsgType == Constant.SYS_MSG_TYPE_ERROR) {
			headerController.imgSysMsg.setImage(new Image(Constant.ICON_ERROR));
			headerController.lblSysMsg.setTextFill(Constant.COLOR_ERROR);
		} else if (sysMsgType == Constant.SYS_MSG_TYPE_FEEDBACK){
			headerController.imgSysMsg.setImage(new Image(Constant.ICON_FEEDBACK));
			headerController.lblSysMsg.setTextFill(Constant.COLOR_FEEDBACK);;
		}
		
		headerController.lblSysMsg.setText(systemMsg);	
		headerController.lblSysMsg.getStyleClass().add(Constant.CSS_CLASS_LABEL_SYSTEM_MSG);
		executeSystemMsgTimerTask();
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\MainController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\MainController.java
	 */

	public void loadListByDate(String displayType) {
		int indexForNextLoop = 0;
		Task task;
	    Date startDate;
	    String taskType;
	    String dateA = Constant.EMPTY_STRING;
		String dateB = Constant.EMPTY_STRING;
		VBox vBox = getContainer(displayType);
		vBox.getChildren().clear();
		ArrayList<Task> taskList = getList(displayType);
		ArrayList<Task> temp = getAppropriateList(displayType, taskList);
		
		today.clear();
		overdue.clear();
		floating.clear();
		todayDate = DateParser.getTodayDate().getTime();
		
	    for(int i = 0; i < temp.size(); i++) {
			task = temp.get(i);
			taskType = task.getTaskType().toString();
			startDate = task.getStartDate();
	    	
			if(taskType.equalsIgnoreCase(TaskType.FLOATING.toString())||
				DateParser.compareDate(todayDate, startDate) || startDate.before(todayDate)) {
				findFloatingOrOverdueOrTodayTask(task, startDate, taskType);
				indexForNextLoop = i+1;
			} else {
				indexForNextLoop = i;
				break;
			}
		} 
		
	    renderOverdueTask(displayType, vBox);
	    renderTodayTask(displayType, vBox);
	    renderFloatingTask(displayType);
		
		for(int j = indexForNextLoop; j < temp.size(); j++) {
			task = temp.get(j);
			
			dateA = Constant.FORMAT_DATE_OUTPUT.format(task.getStartDate());
			
			if(j != indexForNextLoop) {
				dateB = Constant.FORMAT_DATE_OUTPUT.format(temp.get(j-1).getStartDate());
			}
			
			if(j == indexForNextLoop || !dateA.equals(dateB)) {
				renderTaskItem(dateA, task, displayType);
			} else {
				renderTaskItem(Constant.EMPTY_STRING, task, displayType);
			}
		}
	}
	
	public void loadListByCategory(String displayType) {
		bodyController.vBoxCategory.getChildren().clear();
		
		Task task;
		String category;
		ArrayList<Task> taskList = Main.list.getTasks();
		ArrayList<Task> temp = getAppropriateList(displayType, taskList);
		
		for(int i = 0; i < temp.size(); i++) {
			task = temp.get(i);
			category = task.getCategory();
			
			if(i == 0 || !category.equalsIgnoreCase(temp.get(i-1).getCategory())) {
				renderTaskItem(category.toUpperCase(), task, displayType);
			} else {
				renderTaskItem(Constant.EMPTY_STRING, task, displayType);
			}
		}
	}
	
	public void loadListByPriority(String displayType) {
		bodyController.vBoxPriority.getChildren().clear();
		
		Task task;
		String priority;
		ArrayList<Task> taskList = Main.list.getTasks();
		ArrayList<Task> temp = getAppropriateList(displayType, taskList);
		
		for(int i = 0; i < temp.size(); i++) {
			task = temp.get(i);
			priority = task.getPriority().toString();
			
			renderTaskItem(Constant.EMPTY_STRING, task, displayType);
			
			if(i != temp.size()-1 && !priority.equalsIgnoreCase(temp.get(i+1).getPriority().toString())) {
				addHorizontalBar(getContainer(displayType));
			} 
		}
	}
	
	private ArrayList<Task> getAppropriateList(String displayType,
			ArrayList<Task> taskList) {
		ArrayList<Task> temp;
		
		if(displayType.equalsIgnoreCase(Constant.VIEW_NAME_SEARCH_RESULT)) {
			temp = TaskSorter.getTasksSortedByDate(taskList);
		} else if(displayType.equalsIgnoreCase(Constant.TAB_NAME_ALL)) {
			ArrayList<Task> unsortedTemp = ToDoList.generateTaskItems(taskList, Constant.TAB_NAME_ALL);
			temp = TaskSorter.getTasksSortedByDate(unsortedTemp);
		} else if(displayType.equalsIgnoreCase(Constant.TAB_NAME_CATEGORY)) {
			ArrayList<Task> unsortedTemp = ToDoList.generateTaskItems(taskList, Constant.TAB_NAME_CATEGORY);
			temp = TaskSorter.getTasksSortedByCategories(unsortedTemp);
		} else {
			ArrayList<Task> unsortedTemp = ToDoList.generateTaskItems(taskList, Constant.TAB_NAME_PRIORITY);
			temp = TaskSorter.getTasksSortedByPriorities(unsortedTemp);
		}
		
		return temp;
	}

	private void findFloatingOrOverdueOrTodayTask(Task task, Date startDate,
			String taskType) {
		if(taskType.equalsIgnoreCase(TaskType.FLOATING.toString())) {
			floating.add(task);
		} else {
			if(startDate.before(todayDate)) {
				if(!taskType.equalsIgnoreCase(TaskType.TIMED.toString())) {
					overdue.add(task);
				} else {
					if(DateParser.compareDate(task.getTo(), task.getStartDate())) {
						overdue.add(task);
					}
				}
			} else if(DateParser.compareDate(todayDate, startDate)) {
				today.add(task);
			}
		}
	}

	private void renderFloatingTask(String displayType) {
		if(!floating.isEmpty()) {
			renderLists(floating, Constant.EMPTY_STRING, displayType);
		}
	}

	private void renderTodayTask(String displayType, VBox vBox) {
		if(!today.isEmpty()) {
			renderLists(today, Constant.TITLE_TODAY, displayType);
			
			if(!floating.isEmpty()) {
				addHorizontalBar(vBox);
			}
		}
	}

	private void renderOverdueTask(String displayType, VBox vBox) {
		if(!overdue.isEmpty()) {
	    	renderLists(overdue, Constant.TITLE_OVERDUE, displayType);
			
			if(!floating.isEmpty() && today.isEmpty()) {
				addHorizontalBar(vBox);
			}
		}
	}
	
	private VBox getContainer(String displayType) {
		if(displayType.equalsIgnoreCase(Constant.TAB_NAME_ALL)) {
			return bodyController.vBoxAll;
		} else if(displayType.equalsIgnoreCase(Constant.TAB_NAME_CATEGORY)) {
			return bodyController.vBoxCategory;
		} else if(displayType.equalsIgnoreCase(Constant.TAB_NAME_PRIORITY)) {
			return bodyController.vBoxPriority;
		} else {
			return searchResultController.vBoxSearchResult;
		}
	}
	
	private ArrayList<Task> getList(String type) {
		if(type.equalsIgnoreCase(Constant.VIEW_NAME_SEARCH_RESULT)) {
			return Main.searchResults;
		} else {
			return Main.list.getTasks();
		}
	}
	
	private void renderTaskItem(String header, Task task, String displayType) {
		String taskType = task.getTaskType().toString();
		String status = task.getStatus().toString();
		Date onDate = task.getOn();
		Date byDate = task.getBy();
		Date fromDate = task.getFrom();
		Date toDate = task.getTo();
		Date startDate = task.getStartDate();
		VBox vBox = getContainer(displayType);
		String paneColor = getStyle(task, displayType);
		
		if(!header.equals(Constant.EMPTY_STRING)) {
			addTitle(header, vBox);
		}
		
		BorderPane bPane = addBorderPane(paneColor);
		HBox hBoxLeft = addLeftHBox(bPane);
		HBox hBoxRight = addRightHBox(bPane);
		addIcon(task, hBoxLeft);
		addId(task, hBoxLeft);
		addPriorityBar(task, hBoxLeft);
		addDesc(task, hBoxLeft, displayType);
		
		if(!displayType.equalsIgnoreCase(Constant.TAB_NAME_CATEGORY) || status.equalsIgnoreCase(Status.COMPLETED)) {
			addCategory(task, hBoxLeft);
		}
		
		if(displayType.equalsIgnoreCase(Constant.TAB_NAME_ALL) || 
				displayType.equalsIgnoreCase(Constant.VIEW_NAME_SEARCH_RESULT)) {
			addDateTimeInAllOrSearchResult(taskType, status, displayType, onDate, byDate, fromDate, toDate, startDate,
					hBoxRight, hBoxLeft);
		} else {
			addDateTimeInCategoryOrPriority(taskType, status, displayType, onDate, byDate, fromDate, toDate, startDate,
					hBoxRight, hBoxLeft);
		}
		
		vBox.getChildren().add(bPane);
	}

	private HBox addRightHBox(BorderPane bPane) {
		HBox hBox = new HBox();
		bPane.setRight(hBox);
		return hBox;
	}

	private HBox addLeftHBox(BorderPane bPane) {
		HBox hBox = new HBox();
		bPane.setLeft(hBox);
		return hBox;
	}

	private BorderPane addBorderPane(String paneColor) {
		BorderPane bPane = new BorderPane();
		bPane.getStyleClass().add(paneColor);
		return bPane;
	}
	
	private void renderLists(ArrayList<Task> taskList, String title, String displayType) {
		for(int i = 0; i < taskList.size(); i++) {
			if(i == 0) {
				renderTaskItem(title, taskList.get(i), displayType);
			} else {
				renderTaskItem(Constant.EMPTY_STRING, taskList.get(i), displayType);
			}
		}
	}
	
	private String getStyle(Task task, String displayType) {
		boolean isOverdue = false;
		Date today = DateParser.getTodayDate().getTime();
		String status = task.getStatus().toString();
		String taskType = task.getTaskType().toString();
		
		if(!taskType.equalsIgnoreCase(TaskType.FLOATING.toString())) {
			isOverdue = DateParser.isAfterDate(today, task.getStartDate());
		}
		
		if(status.equalsIgnoreCase(Status.COMPLETED)) {
			return Constant.CSS_CLASS_BORDERPANE_COMPLETED;
		} else if(isOverdue) {
			return Constant.CSS_CLASS_BORDERPANE_OVERDUE;
		} else {
			return Constant.CSS_CLASS_BORDERPANE_ALL;
		}
	}
	
	private void addHorizontalBar(VBox vBox) {
		Line hBar = new Line();	
		
		hBar.setStartX(Constant.POSITION_START_X_HORIZONTAL_BAR);
		hBar.setStartY(Constant.POSITION_START_Y_HORIZONTAL_BAR);
		hBar.setEndX(Constant.POSITION_END_X_HORIZONTAL_BAR);
		hBar.setEndY(Constant.POSITION_END_Y_HORIZONTAL_BAR);
		hBar.getStyleClass().add(Constant.CSS_CLASS_LINE_HORIZONTAL_BAR);
		
		Pane paneHBar = new Pane(hBar);
		paneHBar.getStyleClass().add(Constant.CSS_CLASS_PANE_HORIZONTAL_BAR);
		
		vBox.getChildren().add(paneHBar);
	}
	
	private void addTitle(String header, VBox container) {
		Label lblTitle = new Label();
		if(header.equals(Constant.TITLE_TODAY)) {
			lblTitle.getStyleClass().add(Constant.CSS_CLASS_LABEL_TITLE_TODAY);
		} else if(header.equals(Constant.TITLE_OVERDUE)) {
			lblTitle.getStyleClass().add(Constant.CSS_CLASS_LABEL_TITLE_OVERDUE);
		} else {
			lblTitle.getStyleClass().add(Constant.CSS_CLASS_LABEL_TITLE_DATE);
		}
		lblTitle.setText(header);
		container.getChildren().add(lblTitle);
	}
	
	private void addIcon(Task task, HBox hBox) {
		String imgName = Constant.EMPTY_STRING;
		switch (task.getTaskType()) {
			case EVENT : 
				imgName = Constant.ICON_EVENT;
			break;
			case FLOATING : 
				imgName = Constant.ICON_FLOATING;
			break;
			case TIMED : 
				imgName = Constant.ICON_TIMED;
			break;
			case DATED : 
				imgName = Constant.ICON_DATED;
			break;
		}
		
		Image img = new Image(imgName);
		ImageView icon = new ImageView();
		icon.setImage(img);
		icon.getStyleClass().add(Constant.CSS_CLASS_IMAGEVIEW_ICON_IMAGE);
		icon.setFitHeight(Constant.FIT_HEIGHT_ICON);
        icon.setPreserveRatio(true);
        hBox.getChildren().add(icon);
	}
	
	private void addId(Task task, HBox hBox) {
		Label lblId = new Label(task.getId());
		lblId.getStyleClass().add(Constant.CSS_CLASS_LABEL_ID);
		hBox.getChildren().add(lblId);
	}
	
	private void addPriorityBar(Task task, HBox hBox) {
		Line priorityBar = new Line();
		
		priorityBar.setStartY(Constant.POSITION_START_Y_PRIORITY_BAR);
		priorityBar.getStyleClass().add(Constant.CSS_CLASS_LINE_PRIORITY_BAR);
		
		switch (task.getPriority()) {
			case HIGH : 
				priorityBar.setStroke(Constant.COLOR_PRIORITY_HIGH);
			break;
			case MEDIUM : 
				priorityBar.setStroke(Constant.COLOR_PRIORITY_MEDIUM);
			break;
			case LOW : 
				priorityBar.setStroke(Constant.COLOR_PRIORITY_LOW);
			break;
			case NEUTRAL : 
				priorityBar.setStroke(Constant.COLOR_PRIORITY_NEUTRAL);
			break;
		}
		
		hBox.getChildren().add(priorityBar);
	}
	
	private void addDesc(Task task, HBox hBox, String displayType) {
		Label lblDesc = new Label(task.getToDo());
		
		setLengthForDesc(lblDesc, task, displayType);
		
		lblDesc.getStyleClass().add(Constant.CSS_CLASS_LABEL_DESCRIPTION);
		hBox.getChildren().add(lblDesc);
	}
	
	private void addCategory(Task task, HBox hBox) {
		String category = task.getCategory();
		Label lblCategory;
		
		if(!category.equalsIgnoreCase(Constant.CATEGORY_UNCATEGORISED)) {
			lblCategory = new Label(task.getCategory());
			lblCategory.getStyleClass().add(Constant.CSS_CLASS_LABEL_CATEGORY);
			hBox.getChildren().add(lblCategory);
		}
	}
	
	private void addDateTimeInAllOrSearchResult(String taskType, String status, String displayType, Date onDate, 
			Date byDate, Date fromDate, Date toDate, Date startDate, HBox hBoxRight, HBox hBoxLeft) {
		SimpleDateFormat dateFormat;
		
		if(DateParser.isAfterDateWithoutTime(todayDate, startDate)) {
			dateFormat = Constant.FORMAT_DATE_TIME_OUTPUT;
		} else {
			dateFormat = Constant.FORMAT_TIME_OUTPUT;
		}
		
		if(taskType.equalsIgnoreCase(TaskType.EVENT.toString())) {
			addSingleDateTime(onDate, hBoxRight, Constant.EMPTY_STRING, dateFormat);
		} else if(taskType.equalsIgnoreCase(TaskType.DATED.toString())) {
			addSingleDateTime(byDate, hBoxRight, Constant.STR_BEFORE_DATE_BY, dateFormat);
		} else if(taskType.equalsIgnoreCase(TaskType.TIMED.toString())) {
			if(DateParser.compareDate(fromDate, toDate)) {
				addDoubleDateTime(fromDate, toDate, hBoxRight, Constant.STR_BEFORE_DATE_FROM, Constant.STR_BEFORE_DATE_TO, 
						Constant.FORMAT_TIME_OUTPUT, displayType);
			} else if(DateParser.compareDate(startDate, fromDate)) {
				addSingleDateTime(fromDate, hBoxRight, Constant.STR_BEFORE_DATE_FROM, Constant.FORMAT_TIME_OUTPUT);
			} else if(DateParser.compareDate(startDate, toDate) && !DateParser.isAfterDateWithoutTime(todayDate, startDate)) {
				addSingleDateTime(toDate, hBoxRight, Constant.STR_BEFORE_DATE_TO, Constant.FORMAT_TIME_OUTPUT);
			} else {
				addDoubleDateTime(fromDate, toDate, hBoxRight, Constant.STR_BEFORE_DATE_FROM, Constant.STR_BEFORE_DATE_TO, 
						Constant.FORMAT_DATE_OUTPUT_FOR_TIMED_TASK, displayType);
			}
		}
	}
	
	private void addDateTimeInCategoryOrPriority(String taskType, String status, String displayType, Date onDate, 
			Date byDate, Date fromDate, Date toDate, Date startDate, HBox hBoxRight, HBox hBoxLeft) {
		
		if(taskType.equalsIgnoreCase(TaskType.EVENT.toString())) {
			addSingleDateTime(onDate, hBoxRight, Constant.EMPTY_STRING, Constant.FORMAT_DATE_TIME_OUTPUT);
		} else if(taskType.equalsIgnoreCase(TaskType.DATED.toString())) {
			addSingleDateTime(byDate, hBoxRight, Constant.STR_BEFORE_DATE_BY, Constant.FORMAT_DATE_TIME_OUTPUT);
		} else if(taskType.equalsIgnoreCase(TaskType.TIMED.toString())) {
			addDoubleDateTime(fromDate, toDate, hBoxRight, Constant.STR_BEFORE_DATE_FROM, Constant.STR_BEFORE_DATE_TO, 
					Constant.FORMAT_DATE_TIME_OUTPUT, displayType);
		}
	}
	
	private void addSingleDateTime(Date date, HBox hBox, String strBeforeTime, SimpleDateFormat dateFormat) {
		Label lbl = new Label(strBeforeTime);
		lbl.getStyleClass().add(Constant.CSS_CLASS_LABEL_BEFORE_TIME);
		
		Label lblDateTime = new Label(dateFormat.format(date));
		lblDateTime.getStyleClass().add(Constant.CSS_CLASS_LABEL_DATETIME);
		
		hBox.getChildren().add(lbl);
		hBox.getChildren().add(lblDateTime);
	}
	
	private void addDoubleDateTime(Date dateA, Date dateB, HBox hBox, String strA, String strB, 
			SimpleDateFormat dateFormat, String displayType) {
		
		Label lblA = new Label(strA);
		lblA.getStyleClass().add(Constant.CSS_CLASS_LABEL_BEFORE_TIME);
		Label lblB = new Label(strB);
		lblB.getStyleClass().add(Constant.CSS_CLASS_LABEL_BEFORE_TIME);
		
		Label lblDateTime1 = new Label(dateFormat.format(dateA));
		lblDateTime1.getStyleClass().add(Constant.CSS_CLASS_LABEL_DATETIME);
		Label lblDateTime2 = new Label(dateFormat.format(dateB));
		lblDateTime2.getStyleClass().add(Constant.CSS_CLASS_LABEL_DATETIME);
		
		hBox.getChildren().add(lblA);
		hBox.getChildren().add(lblDateTime1);
		hBox.getChildren().add(lblB);
		hBox.getChildren().add(lblDateTime2);
	}
	
	private void setLengthForDesc(Label desc, Task task, String displayType) {
		if(displayType.equalsIgnoreCase(Constant.TAB_NAME_ALL) || 
				displayType.equalsIgnoreCase(Constant.VIEW_NAME_SEARCH_RESULT)) {
			switch(task.getTaskType()) {
				case EVENT :
				case DATED :
					desc.setMaxWidth(Constant.WIDTH_MAX_LABEL_EVENT_ALL);
					break;
				case TIMED :
					desc.setMaxWidth(Constant.WIDTH_MAX_LABEL_TIMED_ALL);
					break;
				default :
					desc.setMaxWidth(Constant.WIDTH_MAX_LABEL_FLOATING);
					break;
			}
		} else {
			switch(task.getTaskType()) {
				case EVENT :
				case DATED :
					desc.setMaxWidth(Constant.WIDTH_MAX_LABEL_EVENT_CAT);
					break;
				case TIMED :
					desc.setMaxWidth(Constant.WIDTH_MAX_LABEL_TIMED_CAT);
					break;
				default :
					desc.setMaxWidth(Constant.WIDTH_MAX_LABEL_FLOATING);
					break;
			}
		}
	}

	public void executeSetting() {
		headerController.settingIcon.setVisible(false);
		headerController.backIcon.setVisible(true);
		
		bodyController.anPaneMain.setVisible(false);
		
		settingController.anPaneSetting.setVisible(true);
		searchResultController.anPaneSearchResult.setVisible(false);
	}
	
	public void executeGoBack() {
		headerController.settingIcon.setVisible(true);
		headerController.backIcon.setVisible(false);
		
		bodyController.anPaneMain.setVisible(true);
		
		settingController.anPaneSetting.setVisible(false);
		searchResultController.anPaneSearchResult.setVisible(false);
	}
	
	public void executeSearchResult() {
		headerController.settingIcon.setVisible(false);
		headerController.backIcon.setVisible(true);
		
		bodyController.anPaneMain.setVisible(false);		
		settingController.anPaneSetting.setVisible(false);
		
		searchResultController.anPaneSearchResult.setVisible(true);
		searchResultController.loadSearchList();
	}
	
	private int checkSystemMsg(String sysMsg) {
		for(int i = 0; i < Constant.SYS_MSG_KEYWORD_SUCCESS.length; i++) {
			if(sysMsg.contains(Constant.SYS_MSG_KEYWORD_SUCCESS[i])) {
				return Constant.SYS_MSG_TYPE_SUCCESS;
			}
		}
		
		for(int j = 0; j < Constant.SYS_MSG_KEYWORD_ERROR.length; j++) {
			if(sysMsg.contains(Constant.SYS_MSG_KEYWORD_ERROR[j])) {
				return Constant.SYS_MSG_TYPE_ERROR;
			}
		}
		
		return Constant.SYS_MSG_TYPE_FEEDBACK;
	}
	
	public void viewDetails(Task task) throws IOException {
		FXMLLoader fxmlLoader = new FXMLLoader(getClass().getResource(Constant.PATH_DETAIL));
        Parent root1 = (Parent) fxmlLoader.load();
		
		detailPopup = new Stage();
		Scene scene = new Scene(root1);
		
		scene.setOnKeyPressed(new EventHandler<KeyEvent>() {
	        public void handle(KeyEvent ke) {
	            if (Constant.SHORTCUT_DETAIL.match(ke)) {
	                detailPopup.close();
	            }
	        }
	    });
		
		detailPopup.initStyle(StageStyle.UNDECORATED);
		detailPopup.setScene(scene); 
        detailPopup.show();
	}
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\MainController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\SearchResultController.java
	 */

package controller;

import java.util.ArrayList;

import application.Constant;
import application.Main;
import application.Task;
import javafx.fxml.FXML;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.VBox;

public class SearchResultController {
	
	private MainController mainCon;
	private BodyController bodyCon;
	private ArrayList<Task> resultList;
	@FXML AnchorPane anPaneSearchResult;
	@FXML VBox vBoxSearchResult;
	
	/*@FXML
	public void initialize() {
		bodyCon = new BodyController();
	}*/
	
	public void init(MainController mainController) {
		mainCon = mainController;
	}
	
	public void loadSearchList() {
		vBoxSearchResult.getChildren().clear();
		mainCon.loadListByDate("searchResult");
	}
}

	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\SearchResultController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\SettingController.java
	 */

	@FXML 
	public void openFileDialogKey(KeyEvent e) {
		if(Constant.SHORTCUT_OPEN_FILE_DIALOG.match(e)) {
			openFileDialog();
		}
	}
	
	@FXML 
	public void openFileDialogMouse(MouseEvent e) {
		openFileDialog();
	}
	
	@FXML
	public void initialize() {
		txtPath.setText(Main.storage.readSavePath());
		
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\SettingController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\SettingController.java
	 */

	public void executeSystemMsgTimerTask() {
		timer = new Timer();
		timer.schedule(new SystemMsgTimerTask(), Constant.TIMER_SYSTEM_MSG_DURATION);
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\SettingController.java





	/**
	 * origin: C:\Users\Ruyi\Desktop\collate\source\controller\SettingController.java
	 */

	private void displaySystemMessage(String systemMsg) {
		lblSysMsgSetting.setText(systemMsg);
		
		if(systemMsg.contains(Constant.SYS_MSG_KEYWORD_FILE_SAVED)) {
			lblSysMsgSetting.setTextFill(Constant.COLOR_SUCCESS);
		} else {
			lblSysMsgSetting.setTextFill(Constant.COLOR_ERROR);
		}
		
		executeSystemMsgTimerTask();
	}
	
	// End of segment: C:\Users\Ruyi\Desktop\collate\source\controller\SettingController.java





